-- Statement evaluator.
import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
fun eval (c, stmt) {
	case stmt of
	  Assn(name, expr) -> evalAssn(c, name, expr)
   | Seq(s1, s2) -> eval(eval(c, s1), s2)
   | Skip -> c
   | Read(name) -> evalRead(c, name)
   | Write(expr) -> evalWrite(c, expr)
   esac
}

fun evalAssn (c@[st, w], name, expr) {
   [st <- [name, evalExpr(st, expr)], w]
}

fun evalRead (c@[st, w], name) {
   case readWorld(w) of [n, newWorld] -> 
      [st <- [name, n], newWorld] 
   esac
}

fun evalWrite (c@[st, w], expr) {
   [st, writeWorld(evalExpr(st, expr), w)]
}
-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
   eval([emptyState, createWorld(input)], stmt).snd.getOutput
}